<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Contest on ◯ △ □</title>
    <link>https://blog.yudppp.com/tags/contest/</link>
    <description>Recent content in Contest on ◯ △ □</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 24 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.yudppp.com/tags/contest/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ISUCON8の予選で敗戦した話と感想戦で1位の点数を超えるまで頑張った話</title>
      <link>https://blog.yudppp.com/posts/isucon2018/</link>
      <pubDate>Mon, 24 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yudppp.com/posts/isucon2018/</guid>
      <description>当日 ISUCON8の予選に参加しました。ISUCON4から参加しているので5回目ですが、一度も決勝行けてないので辛いです。
今年もいつものメンバーで参加の予定だったのですが体調不良によって2人での参加になりました。
自分は当日メインでアプリを触りやったことのは
 User周りの不要なQuery削除 Sheetをオンメモリーにもつ 1000N + 1 だった getEvents を一旦 N + 1 に修正 reservationsにuser_id_idxを追加 getEventSimpleというsheet情報だけをとるように一部切り替え  この辺りを行い最高で19,787となりのあと1時間だったので夢を見たのですが、その後Failが続き色々検証しているうちに終了となりました。
reservationにRedisを使おうという考えもあったのですが時間考えると乗り出せませんでした。
今年のISUCON最高得点出した時のスクショ。予選突破の閾値が36,471だからもう一つ二つできてたら、、 pic.twitter.com/K9pVmjahZj
&amp;mdash; yudppp (@yudppp) 2018年9月16日 
ちなみに構成は 1号機: DB 2号機: H2O 3号機: app(Go) でした。
感想戦 あまりに悔しかったので予選の最高得点を超えれるよう1人で頑張ってみました。 個人的なルールとして今回はカンニング(他の参加者のブログを見ない)でやるようにしました。 ただしTwitterやDiscord等で受動的に入ってきてしまったものは見ています。
結果として 109,872 をだすことができ、一位通過の点数を越すことができたのでひと満足しています。(※実際の予選と同じスペックですが密集度が異なるためスコアが同一の水準に満たない場合があります)
主にアプリで追加でやったことは
 シートの予約時のロックをアプリで取るように変更 → これでFailが減った FOR UPDATEの除去 getEventsのreservationをまとめて取るように renderReportCSVのsortを削除  この辺りを触っていたところ4万点台は出るようになってきましたが、アプリが一台で辛くなってきました。またh2oのサーバーに余裕があったので /admin のアクセスだけh2oと同じサーバーで動かすようにしたところ7万点台になりました。
ベンチの結果を見ると
 レスポンスが遅いため負荷レベルを上げられませんでした。/admin/api/reports/sales
 だけとなっていて、このAPI自体はRDBを使っている以上どうしようもないところまできたので、マニュアルを見返して見た所、
 負荷走行中は、毎秒負荷レベルが増えていきます。 ただし、過去5秒以内に何らかのエラーが発生していた場合は負荷レベルが上昇しません。 終了時の負荷レベルや、負荷レベルが上がらない原因になったエラーについてはポータルサイトから確認することができます。
負荷走行後の確認へのレスポンスがそれぞれ下記の規定秒数以内に戻らない場合 POST /admin/api/actions/login: 20秒以内 GET /admin/api/reports/sales: 60秒以内</description>
    </item>
    
    <item>
      <title>ISUCON5の予選に参加した話</title>
      <link>https://blog.yudppp.com/posts/isucon2015/</link>
      <pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yudppp.com/posts/isucon2015/</guid>
      <description>はじめに 昨年のISUCON4では初めてGolangを触り、ワーカー数を増やせることに気づかず負荷余裕なのになーっていていたのの雪辱をはらすべき、去年もおんぶに抱っこさせてもらった先輩がたと一緒に参加しました。
メンバー  NW周りとか色々やっているインフラの先輩 Javaをメインで書いてるアプリケーションエンジニアの先輩 go書いたりjs書いたりしている自分  前準備したこと 重い処理があったときにCacheしようとしていたのでmemcachedやRedisをすぐに導入できるようにgoのfileを準備
gist.github.com
当日 11:00  GCEのイメージ持ってきて、なんとかサーバーに入る(だれもGCP未経験)  11:30  現状動いているアプリケーションとversionの洗い出し githubのprivate repositoryにアプリケーションをいれて開発しやすいように  12:00  一旦Javaで動かしてみる Score: 8xxで一瞬トップに  12:30  slow queryを一秒超えたものをでるようにしてもらう。 my.confがどうのこうのやっていた。 アプリケーションの概要を把握していく  13:00 SELECT user_id, owner_id, DATE(created_at) AS date, MAX(created_at) AS updated FROM footprints WHERE user_id = 4881 GROUP BY user_id, owner_id, DATE(created_at) ORDER BY updated DESC LIMIT 50;  と足跡のところでIndexがなくslowqueryがでていたのでindex追加
なぜかJavaとGoを両方試していく
13:30 SELECT * FROM relations WHERE one = 3992 OR another = 3992 ORDER BY created_at DESC;  relationsがORを使っていてslowqueryでていたので</description>
    </item>
    
  </channel>
</rss>